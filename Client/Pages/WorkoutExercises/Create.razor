@page "/WorkoutExercises/Create/{DayId:int}"
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager NavManager
@inject NotificationService NotificationService
@using System.Linq.Dynamic.Core

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Programs" />
        <RadzenBreadCrumbItem Text="Edit Program" />
        <RadzenBreadCrumbItem Path="@dayCrumb" Text="Edit Day" />
        <RadzenBreadCrumbItem Style="color:darkseagreen" Text="Create WorkoutExercise" />
    </RadzenBreadCrumb>
</div>

<h4>Edit Workout Exercise</h4>



@if(workoutExercise != default)
{
    <RadzenRow>
        <RadzenColumn>
            <RadzenText>Day Id: @DayId</RadzenText>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn>
            <RadzenDropDown TValue="int" @bind-Value="exerciseId" Data="@exercises" TextProperty="Name" ValueProperty="Id" Change=@OnChange />
        </RadzenColumn>
    </RadzenRow>

    <RadzenButton Click="() => AddSet()">Add Set</RadzenButton>

    <RadzenText>Sets:</RadzenText>
    <RadzenDataGrid Data="@sets" TItem="Set">
        <Columns>
            <RadzenDataGridColumn TItem="Set" Property="Weight" Title="Weight" />
            <RadzenDataGridColumn TItem="Set" Property="Reps" Title="Reps" />
            <RadzenDataGridColumn TItem="Set" Property="RPE" Title="RPE" />
            <RadzenDataGridColumn TItem="Set" Property="RIR" Title="RIR" />
            <RadzenDataGridColumn TItem="Set" Property="PercentageOfOneRepMax" Title="Percentage" />
            <RadzenDataGridColumn TItem="Set" Property="Type" Title="Type" />
        </Columns>
    </RadzenDataGrid>
}
else
{
    <RadzenRow>
        <RadzenColumn>
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </RadzenColumn>
    </RadzenRow>
}

@code {
    [Parameter]
    public int DayId { get; set; }
    private WorkoutExercise workoutExercise = new WorkoutExercise();
    private int exerciseId = 0;
    private IEnumerable<Set> sets;
    private List<Exercise> exercises = new List<Exercise>();
    string dayCrumb = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            workoutExercise.DayId = DayId;
            dayCrumb = $"/Days/Edit/{DayId}";
            exercises = await Http.GetFromJsonAsync<List<Exercise>>($"api/Exercises");
            var result = await Http.PostAsJsonAsync("api/WorkoutExercises", workoutExercise);
            if (!result.IsSuccessStatusCode)
            {
                NavManager.NavigateTo($"/Days/Edit/{DayId}");
            }
            else
            {
                workoutExercise = await result.Content.ReadFromJsonAsync<WorkoutExercise>();
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Created Workout Exercise", Detail = result.ReasonPhrase, Duration = 20000 });
            }
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void OnChange()
    {
        workoutExercise.ExerciseId = exerciseId;
    }

    private async Task AddSet()     
    {
        var set = await DialogService.OpenAsync<ProgramPro.Client.Pages.Set.Create>($"Add Set",
            new Dictionary<string, object>() { { "WorkoutExerciseId", workoutExercise.Id } },
            new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
        if((Set)set != default)
        {
            List<Set> newSets = sets == null ? new List<Set>() : sets.ToList();
            newSets.Add((Set)set);
            sets = newSets;
            StateHasChanged();
        }
    }
}
