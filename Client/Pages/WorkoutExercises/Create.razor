@page "/WorkoutExercises/Create/{DayId:int}"
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager NavManager
@inject NotificationService NotificationService

<h4>Edit Workout Exercise</h4>



@if(workoutExercise != null)
{
    <RadzenRow>
        <RadzenColumn>
            <RadzenText>Day Id: @DayId</RadzenText>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn>
            <RadzenDropDown @bind-Value="workoutExercise.Exercise" Data="@exercises" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenButton Click="() => AddSet()">Add Set</RadzenButton>

    <RadzenText>Sets:</RadzenText>
    <ul>                  
        @if (sets != null)
        {
            @foreach (var set in sets)
            {
                <li>
                    <p>Set Weight: @set.Weight</p>
                </li>
            }
        }

    </ul>

    <RadzenButton Click="() => Save()">Create</RadzenButton>
}
else
{
    <p>Workout Exercise not found.</p>
}

@code {
    [Parameter]
    public int DayId { get; set; }
    private WorkoutExercise workoutExercise = new WorkoutExercise();
    private bool showPopup = false;
    private List<Set> sets = new List<Set>();
    private List<Exercise> exercises = new List<Exercise>
    {
        new Exercise{ Description = "test", Id = 1, Name = "test"},
        new Exercise{ Description = "test2", Id = 2, Name = "test2"},
        new Exercise{ Description = "test3", Id = 3, Name = "test3"},
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task AddSet()
    {
        var set = await DialogService.OpenAsync<ProgramPro.Client.Pages.Set.Create>($"Add Set",
            new Dictionary<string, object>() { /* { "WorkoutExerciseId", Id } */ },
            new DialogOptions() { Width = "400px", Height = "800px", Resizable = true, Draggable = true });
        if(set != null)
        {
            sets.Add((Set)set);
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        workoutExercise.DayId = DayId;
        var result = await Http.PostAsJsonAsync("api/WorkoutExercises", workoutExercise);
        if (result.IsSuccessStatusCode)
        {
            if(sets.Count > 0)
            {
                var workoutExercise = await result.Content.ReadFromJsonAsync<WorkoutExercise>();
                for (int i = 0; i < sets.Count; i++)
                {
                    sets[i].WorkoutExerciseId = workoutExercise.Id;
                }
                var result2 = await Http.PostAsJsonAsync("/api/Sets/PostSets", sets);
                if (result2.IsSuccessStatusCode)
                {
                    NavManager.NavigateTo($"/Days/Create/{DayId}");
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.ReasonPhrase, Duration = 20000 });
                }
            }
            else
            {
                NavManager.NavigateTo($"/Days/Create/{DayId}");
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.ReasonPhrase, Duration = 20000 });
        }
    }
}
