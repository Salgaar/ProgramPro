@page "/WorkoutExercises/Edit/{Id:int}"
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager NavManager
@inject NotificationService NotificationService
@using System.Linq.Dynamic.Core

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Programs" />
        <RadzenBreadCrumbItem Text="Edit Program" />
        <RadzenBreadCrumbItem Path="@dayCrumb" Text="Edit Day" />
        <RadzenBreadCrumbItem Style="color:darkseagreen" Text="Edit Workout Exercise" />
    </RadzenBreadCrumb>
</div>

@if(workoutExercise != default)
{
    <RadzenRow>
        <RadzenColumn>
            <RadzenDropDown TValue="int" @bind-Value="exerciseId" Data="@exercises" TextProperty="Name" ValueProperty="Id" Change=@OnChange />
        </RadzenColumn>
    </RadzenRow>
    
          <RadzenRow Style="margin-top:20px;margin-bottom:20px;">
        <RadzenButton Click="() => AddSet()">Add Set</RadzenButton>
          </RadzenRow>


    <RadzenDataGrid Data="@sets" TItem="Set">
        <Columns>
            <RadzenDataGridColumn TItem="Set" Property="Weight" Title="Weight" />
            <RadzenDataGridColumn TItem="Set" Property="Reps" Title="Reps" />
            <RadzenDataGridColumn TItem="Set" Property="RPE" Title="RPE" />
            <RadzenDataGridColumn TItem="Set" Property="RIR" Title="RIR" />
            <RadzenDataGridColumn TItem="Set" Property="PercentageOfOneRepMax" Title="Percentage" />
            <RadzenDataGridColumn TItem="Set" Property="Type" Title="Type" />
            <RadzenDataGridColumn TItem="Set">
                <Template Context="set">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(async args => await EditSet(set))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <RadzenRow Style="padding:100px">
        <div style="margin:auto; text-align:center;">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </RadzenRow>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private WorkoutExercise workoutExercise = new WorkoutExercise();
    private IEnumerable<Set> sets;
    private IEnumerable<Exercise> exercises;
    private int exerciseId;
    string dayCrumb = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            exercises = await Http.GetFromJsonAsync<List<Exercise>>($"api/Exercises");
            workoutExercise = await Http.GetFromJsonAsync<WorkoutExercise>($"api/WorkoutExercises/{Id}");
            sets = workoutExercise.Sets;
            exerciseId = workoutExercise.ExerciseId;
            dayCrumb = $"/Days/Edit/{workoutExercise.DayId}";
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task EditSet(Set set)
    {
        await DialogService.OpenAsync<ProgramPro.Client.Pages.Set.CreateOrEdit>($"Edit Set",
            new Dictionary<string, object>() { { "Set", set } },
            new DialogOptions() { Width = "400px", Height = "512px", Resizable = true, Draggable = true });
    }

    async Task OnChange()
    {
        workoutExercise.ExerciseId = exerciseId;
        var response = await Http.PutAsJsonAsync($"api/WorkoutExercises/{Id}", workoutExercise);
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Updated Workout Exercise", Detail = "", Duration = 5000 });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Failed To Update Workout Exercise", Detail = response.ReasonPhrase, Duration = 5000 });
        }
    }

    private async Task AddSet()     
    {
        var set = await DialogService.OpenAsync<ProgramPro.Client.Pages.Set.CreateOrEdit>($"Add Set",
            new Dictionary<string, object>() { { "WorkoutExerciseId", workoutExercise.Id } },
            new DialogOptions() { Width = "400px", Height = "512px", Resizable = true, Draggable = true });
        if((Set)set != default)
        {
            List<Set> newSets = sets == null ? new List<Set>() : sets.ToList();
            newSets.Add((Set)set);
            sets = newSets;
            StateHasChanged();
        }
    }
}
