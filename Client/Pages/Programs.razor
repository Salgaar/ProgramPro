@page "/Programs"
@inject NavigationManager Nav
@inject NotificationService NotificationService
@attribute [Authorize]
@inject HttpClient Http


 <RadzenRow Gap="4">
     <RadzenColumn>
        <RadzenButton Click=@(args => MakeNewProgram()) Text="Make New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
     </RadzenColumn>
 </RadzenRow>

 <RadzenRow>
     <RadzenColumn>
        <RadzenDataList AllowVirtualization=@allowVirtualization Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                        WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                        Data="@programs" TItem="Trainingprogram" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
            <Template Context="program">
                <RadzenCard Style="width: 100%; padding: 0;">
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="12" SizeLG="3" Class="rz-p-4 product-title">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-secondary">@(program.Name)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeLG="7" Class="rz-p-4">
                                <RadzenRow Gap="0">
                                    <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">In Stock</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@(program.Description)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">In Stock</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@(program.Description)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="6" SizeLG="5">
                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">In Stock</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@(program.Description)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="6" SizeLG="3" Class="rz-text-align-start rz-text-align-lg-end">
                                        <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", program.Id)}") />
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeLG="2" Class="rz-p-4">
                                <RadzenButton Text="Order now" Style="width: 100%" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
     </RadzenColumn>
 </RadzenRow>

    <style>
        .product-title {
            min-height: 72px;
            background-color: var(--rz-secondary-lighter);
        }

        .price-badge {
            font-size: 16px;
            font-weight: bold;
            line-height: 20px;
            padding: 8px;
        }
    </style>

    @code {
    bool allowVirtualization = false;
    private List<Trainingprogram> programs = new List<Trainingprogram>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            programs = await Http.GetFromJsonAsync<List<Trainingprogram>>("api/Trainingprograms");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task MakeNewProgram()
    {
        var result = await Http.PostAsJsonAsync("api/Trainingprograms", new Trainingprogram { Name = "New Program" });
        if (result.IsSuccessStatusCode)
        {
            var program = await result.Content.ReadFromJsonAsync<Trainingprogram>();
            Nav.NavigateTo($"/Programs/{program.Id}");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.ReasonPhrase, Duration = 20000 });
        }
    }
}