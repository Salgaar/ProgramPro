@page "/SplitDefinitions/Edit/{Id}"
@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/SplitDefinitions" Text="SplitDefinitions" />
        <RadzenBreadCrumbItem Style="color:darkseagreen" Text="Edit" />
    </RadzenBreadCrumb>
</div>

@if (SplitDefinition == null)
{
    <RadzenRow Style="padding:100px">
        <div style="margin:auto; text-align:center;">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </RadzenRow>
}
else
{
    <RadzenRow Style="margin-bottom:10px">
            <RadzenColumn>
                <RadzenButton Style="float:right;" ButtonStyle="ButtonStyle.Success" Click=@(async() => await Save())>Save</RadzenButton>
            </RadzenColumn>
    </RadzenRow>
    <RadzenRow Style="margin-bottom:10px">
        <RadzenColumn>
            <RadzenCard>
                <RadzenRow>
                    <RadzenColumn Size="6">

                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3">Name</RadzenText>
                        <RadzenTextBox @bind-Value="SplitDefinition.Name" class="w-100" />

                    </RadzenColumn>
                    <RadzenColumn Size="6">

                        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3">Description</RadzenText>
                        <RadzenTextArea @bind-Value="SplitDefinition.Description" class="w-100" />

                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
            
        </RadzenColumn>
    </RadzenRow>
    <SplitDefinitionCalendar SplitDefinition=@SplitDefinition />
}


@code {
    [Parameter] 
    public string Id { get; set; }
    public SplitDefinition SplitDefinition { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SplitDefinition = await Http.GetFromJsonAsync<SplitDefinition>($"api/SplitDefinitions/{Id}");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task Save()
    {
        var response = await Http.PutAsJsonAsync($"api/SplitDefinitions/{SplitDefinition.Id}", SplitDefinition);
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "SplitDefinition changes saved", Detail = "", Duration = 5000 });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error saving changes", Detail = response.ReasonPhrase, Duration = 5000 });
        }
    }
}
