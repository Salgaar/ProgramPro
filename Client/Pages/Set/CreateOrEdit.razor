@using System.Reflection;
@using System.ComponentModel.DataAnnotations;
@inject DialogService DialogService
@inject HttpClient Http
@inject NotificationService NotificationService

<EditForm Model="@Set" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="alert alert-danger" style="display: @errorDisplay">
        @errorMessage
    </div>
    <div style="z-index:200">
        <RadzenCard>
            <RadzenRow Style="margin-bottom:20px;">
                <RadzenColumn Style="text-align:center">
                    <RadzenText Text="@DisplayNameHelper.GetDisplayName(Set, "Weight")" />
                    <RadzenNumeric @bind-Value="@Set.Weight" />
                    <ValidationMessage For="() => Set.Weight" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Style="margin-bottom:20px;">
                <RadzenColumn Style="text-align:center">
                    <RadzenText Text="@DisplayNameHelper.GetDisplayName(Set, "Reps")" />
                    <RadzenNumeric @bind-Value="@Set.Reps" />
                    <ValidationMessage For="() => Set.Reps" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Style="margin-bottom:20px;">
                <RadzenColumn Style="text-align:center">
                    <RadzenText Text="Select Difficulty Measurements" />
                    <RadzenSelectBar @bind-Value=@valuesForDifficulties Data="@difficultyValues" TValue="IEnumerable<string>" Multiple="true" Change=@OnChangeDifficulty />
                    <ValidationMessage For="() => Set.UsingRIR" />
                    <ValidationMessage For="() => Set.UsingRPE" />
                    <ValidationMessage For="() => Set.UsingPercentageOfOneRepMax" />
                </RadzenColumn>
            </RadzenRow>

            @if (Set.UsingRPE)
            {
                <RadzenRow Style="margin-bottom:20px;">
                    <RadzenColumn Style="text-align:center">
                        <RadzenText Text="@DisplayNameHelper.GetDisplayName(Set, "RPE")" />
                        <RadzenTextBox @bind-Value="@Set.RPE" />
                        <ValidationMessage For="() => Set.RPE" />
                    </RadzenColumn>
                </RadzenRow>
            }

            @if (Set.UsingRIR)
            {
                <RadzenRow Style="margin-bottom:20px;">
                    <RadzenColumn Style="text-align:center">
                        <RadzenText Text="@DisplayNameHelper.GetDisplayName(Set, "RIR")" />
                        <RadzenTextBox @bind-Value="@Set.RIR" />
                        <ValidationMessage For="() => Set.RIR" />
                    </RadzenColumn>
                </RadzenRow>
            }

            @if (Set.UsingPercentageOfOneRepMax)
            {
                <RadzenRow Style="margin-bottom:20px;">
                    <RadzenColumn Style="text-align:center">
                        <RadzenText Text="@DisplayNameHelper.GetDisplayName(Set, "PercentageOfOneRepMax")" />
                        <RadzenTextBox @bind-Value="@Set.PercentageOfOneRepMax" />
                        <ValidationMessage For="() => Set.PercentageOfOneRepMax" />
                    </RadzenColumn>
                </RadzenRow>
            }

            <RadzenRow Style="margin-bottom:20px;">
                <RadzenColumn Style="text-align:center">
                    <RadzenText Text="@DisplayNameHelper.GetDisplayName(Set, "Type")" />
                    <RadzenSelectBar @bind-Value=@enumValue Data="@enumValues" TValue="string" Multiple="false" Change=@OnChangeType />
                    <ValidationMessage For="() => Set.Type" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn Style="text-align:right">
                    @if (editing)
                    {
                        <button type="submit">Edit</button>
                    }
                    else
                    {
                         <button type="submit">Create</button>
                    }
                    
                </RadzenColumn>

            </RadzenRow>
        </RadzenCard>
    </div>
</EditForm>

@code {
    [Parameter]
    public int WorkoutExerciseId { get; set; }
    [Parameter]
    public Set Set { get; set; } = null;
    string enumValue = null;
    IEnumerable<string> enumValues = Enum.GetNames(typeof(SetType)).ToList();
    bool editing = true;

    private string errorMessage = string.Empty;
    private string errorDisplay = "none";

    IEnumerable<string> valuesForDifficulties = null;
    IEnumerable<string> difficultyValues = new string[]{"RPE", "RIR", "PercentageOfOneRepMax"};


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            if(Set == null)
            {
                editing = false;
                Set = new Set();
                Set.WorkoutExerciseId = WorkoutExerciseId;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void OnChangeType(string value)
    {
        List<SetType> setTypeList = Enum.GetValues(typeof(SetType)).Cast<SetType>().ToList();
        foreach(var type in setTypeList)
        {
            if (type.ToString().Equals(value))
            {
                Set.Type = type;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        // Reset error message and display style
        errorMessage = string.Empty;
        errorDisplay = "none";

        // Perform the HTTP POST request to the server
        var response = await Http.PostAsJsonAsync("api/Sets", Set);

        if (!response.IsSuccessStatusCode)
        {
            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                // Handle BadRequest response containing ModelState errors
                var responseContent = await response.Content.ReadAsStringAsync();
                errorMessage = responseContent;
                errorDisplay = "block";
            }
            else
            {
                // Handle other error responses as needed
                // ...
            }
        }
        else
        {
            DialogService.Close(Set);
            if(editing)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Set Edited", Duration = 20000 });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Set Created", Duration = 20000 });
            }
            
        }
    }

    void OnChangeDifficulty(IEnumerable<string> values)
    {
        Set.UsingPercentageOfOneRepMax = false;
        Set.UsingRIR = false;
        Set.UsingRPE = false;

        foreach(var value in values)
        {
            switch (value)
            {
                case "RPE":
                    Set.UsingRPE = true;
                    break;
                case "RIR":
                    Set.UsingRIR = true;
                    break;
                case "PercentageOfOneRepMax":
                    Set.UsingPercentageOfOneRepMax = true;
                    break;
            }
        }
    }
}
