@page "/Programs"
@inject NavigationManager Nav
@inject NotificationService NotificationService
@inject HttpClient Http


<RadzenRow>
    <RadzenColumn>
        <RadzenCard Variant="Variant.Text" Style="margin:10px; border-radius: 0px;">
            <RadzenButton Click=@(args => MakeNewProgram()) Text="Create New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" />
        </RadzenCard>

    </RadzenColumn>
</RadzenRow>

 <RadzenRow>
     <RadzenColumn>
        <RadzenDataList WrapItems="false" PageSize="5" AllowPaging="true" Data="@programs" TItem="TrainingProgram">
            <Template Context="trainingProgram">
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenText TextStyle="TextStyle.H4">@trainingProgram.Name</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenText TextStyle="TextStyle.Overline">Description</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">@trainingProgram.Description</RadzenText>
                    </RadzenColumn>
                   <RadzenColumn>
                        <RadzenText TextStyle="TextStyle.Overline">Days</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">@trainingProgram.Days.Count</RadzenText>
                   </RadzenColumn>
                   <RadzenColumn>
                       <RadzenButton Click="@(() => EditProgram(@trainingProgram.Id))">Edit</RadzenButton>
                   </RadzenColumn>
                </RadzenRow>
            </Template>
        </RadzenDataList>
     </RadzenColumn>
 </RadzenRow>

    @code {
    bool allowVirtualization = false;
    private List<TrainingProgram> programs = new List<TrainingProgram>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            programs = await Http.GetFromJsonAsync<List<TrainingProgram>>("api/Trainingprograms");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void EditProgram(int id)
    {
        Nav.NavigateTo($"/Programs/Edit/{id}");
    }

    private async Task MakeNewProgram()
    {
        var result = await Http.PostAsJsonAsync("api/Trainingprograms", new TrainingProgram { Name = "New Program" });
        if (result.IsSuccessStatusCode)
        {
            var program = await result.Content.ReadFromJsonAsync<TrainingProgram>();
            Nav.NavigateTo($"/Programs/Edit/{program.Id}");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.ReasonPhrase, Duration = 20000 });
        }
    }
}