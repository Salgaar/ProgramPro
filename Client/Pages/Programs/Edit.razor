@page "/Programs/Edit/{Id:int}"
@inject HttpClient Http
@inject DialogService DialogService

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/Programs" Text="Programs" />
        <RadzenBreadCrumbItem Style="color:darkseagreen" Text="Edit" />
    </RadzenBreadCrumb>
</div>

@if (program == null)
{
    <RadzenRow>
        <RadzenColumn>

            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </RadzenColumn>
    </RadzenRow>
}
else
{
    <RadzenRow RowGap="2rem">
        <RadzenColumn>
            <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H2">Edit Training Program</RadzenText>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow RowGap="2rem">
        <RadzenColumn>
            <RadzenRow>
                <RadzenColumn Size="4">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name</RadzenText>
                        <RadzenTextBox Value="@program.Name" class="w-100" />
                    </RadzenCard>
                </RadzenColumn>
                <RadzenColumn Size="4">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Description</RadzenText>
                        <RadzenTextArea class="w-100" />
                    </RadzenCard>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenButton Click=@(async() => await Save())>Save</RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </RadzenColumn>
    </RadzenRow>
<RadzenRow>
        <Calendar Days="program.Days.ToList()" ProgramId="@Id" />
</RadzenRow>
}


@code {
    [Parameter] public int Id { get; set; }
    public int DaysInASplit { get; set; } = 7;
    public int SplitNumber { get; set; } = 1;
    public DateTime StartDate { get; set; } = DateTime.Now;
    TrainingProgram program = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            program = await Http.GetFromJsonAsync<TrainingProgram>($"api/Trainingprograms/{Id}");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task Save()
    {
        program.DaysInASplit = DaysInASplit;
        program.SplitNumber = SplitNumber;
        program.StartDate = StartDate;
        var response = await Http.PutAsJsonAsync($"api/Trainingprograms/{program.Id}", program);
        if (response.IsSuccessStatusCode)
        {

        }
        else
        {
            
        }
    }
}
