@using ProgramPro.Shared.Models.DataTransferObjects;
@inject NavigationManager NavManager
@inject HttpClient Http
@inject NotificationService NotificationService
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService

<RadzenRow Style="margin-top:10px;margin-bottom:30px;">
    <RadzenColumn>
        <RadzenButton Text="Add Component" Click="AddComponent" />
    </RadzenColumn>
</RadzenRow>

@foreach (Component component in components)
{
    <div class="calendar">
        @{
            double divide = (double)component.Days.Count / 5;
            double timesToRun = Math.Ceiling(divide);
            int daysRan = 0;
        }

        <div>
            <RadzenRow Style="padding:10px; margin-bottom:20px;">
                <RadzenColumn Size="2">
                    <RadzenText TextStyle="TextStyle.H6">Component @component.ComponentNumber</RadzenText>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenRow>
                        <RadzenColumn Size="3">
                            <RadzenText TextAlign="TextAlign.Right" Text="Name" />
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenTextBox @bind-Value="@component.Name" />
                        </RadzenColumn>
                       
                        
                    </RadzenRow>
                </RadzenColumn>
                <RadzenColumn >
                    <RadzenRow>
                        <RadzenColumn Size="3">
                            <RadzenText TextAlign="TextAlign.Right" Text="Description" />
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenTextBox @bind-Value="@component.Description" />
                        </RadzenColumn>
                        
                        
</RadzenRow>
                    
                </RadzenColumn>
                <RadzenColumn Size="2" Style="text-align:right">
                    <RadzenButton Text="Add Day" Click=@((args) => NewDayClickedMenu(args, components, component)) />
                </RadzenColumn>
                <RadzenColumn Size="2" Style="text-align:right">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Delete Split" Click=@(async() => await DeleteComponent(component)) />
                </RadzenColumn>
            </RadzenRow>
            @if (component.Days.Count > 0)
            {
                @for (int i = 0; i < timesToRun && daysRan < component.Days.Count; i++)
                {
                    <div class="component">

                        <div class="days">
                            @for (int k = 1; k <= 5 && daysRan < component.Days.Count; k++, daysRan++)
                            {
                                var day = component.Days.ToList()[daysRan];

                                <div class="day" @onclick="(args) => DayClickedMenu(args, day)">
                                    <div class="day-number">
                                        @day.Date.Day : @day.Date.DayOfWeek
                                    </div>
                                    @if (day.Type == DayType.Rest)
                                    {
                                        <p>rest day</p>
                                    }
                                    else if (day.WorkoutExercises.Count == 0)
                                    {
                                        <p>empty training day</p>
                                    }
                                    else
                                    {
                                        @foreach (var workoutExercise in day.WorkoutExercises)
                                        {
                                            <p style="margin-bottom:5px">@workoutExercise.Exercise.Name: @workoutExercise.Sets.Count sets</p>
                                        }
                                    }
                                </div>
                            }
                        </div>

                    </div>
                }
            }
        </div>




    </div>
}



@code {
    [Parameter]
    public TrainingProgram Program { get; set; }
    public List<Component> components = new List<Component>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UpdateComponents(Program.Components.ToList());
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task AddComponent()
    {
        var componentNumber = components.Count + 1;
        Component component = new Component { Name = "New Component", Description = "", ComponentNumber = componentNumber, TrainingProgramId = Program.Id, Days = new List<Day>() };
        var response = await Http.PostAsJsonAsync("api/Components", component);
        if (response.IsSuccessStatusCode)
        {
            await UpdateComponents();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Added component", Duration = 5000 });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error adding component", Detail = response.ReasonPhrase, Duration = 5000 });
        }
    }

    private async Task DeleteComponent(Component component)
    {
        var response = await Http.DeleteAsync($"api/Components/{component.Id}");
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Component Deleted", Duration = 5000 });
            await UpdateComponents();
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Deleting Component", Detail = response.ReasonPhrase, Duration = 5000 });
        }
    }

    private async Task DeleteDay(Day day)
    {
        var response = await Http.DeleteAsync($"api/Days/{day.Id}");
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Deleted Day", Duration = 5000 });
            await UpdateComponents();
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = response.ReasonPhrase, Duration = 5000 });
        }
    }

    private DateTime GetNewDayDate(Component component, List<Component> components)
    {
        List<Day> days = component.Days.ToList();
        DateTime newDate = default;
        if (days.Count > 0)
        {
            newDate = days[0].Date;
            for (int i = 1; i < days.Count; i++)
            {
                if (newDate < days[i].Date)
                {
                    newDate = days[i].Date;
                }
            }
            return newDate.AddDays(1);
        }
        else
        {
            for (int i = 1; i < components.Count; i++)
            {
                var earlierComponent = components.FirstOrDefault(x => x.ComponentNumber == component.ComponentNumber - i);
                if (earlierComponent != null)
                {
                    days = earlierComponent.Days.ToList();
                    if (days.Count > 0)
                    {
                        newDate = days[0].Date;
                        for (int j = 1; j < days.Count; j++)
                        {
                            if (newDate < days[j].Date)
                            {
                                newDate = days[j].Date;
                            }
                        }
                        return newDate.AddDays(1);
                    }
                }
            }
            newDate = Program.StartDate;
            return newDate;
        }
    }

    /// <summary>
    /// Adds a day to a split
    /// </summary>
    /// <param name="day"></param>
    /// <returns></returns>

    private async Task AddDay(Component component, List<Component> components, DayType dayType = DayType.Training)
    {
        var newDate = GetNewDayDate(component, components);
        var result = await Http.PostAsJsonAsync("api/Days", new Day { Date = newDate, ComponentId = component.Id, Type = dayType });
        if (result.IsSuccessStatusCode)
        {
            if (dayType == DayType.Training)
            {
                var day = await result.Content.ReadFromJsonAsync<Day>();
                NavManager.NavigateTo($"/Days/Edit/{day.Id}");
            }
            else
            {
                await UpdateComponents();
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.ReasonPhrase, Duration = 5000 });
        }
    }

    async Task UpdateComponents()
    {
        var dbComponent = await Http.GetFromJsonAsync<List<Component>>($"api/Components");
        dbComponent = dbComponent.OrderBy(x => x.ComponentNumber).ToList();
        for (int i = 0; i < dbComponent.Count; i++)
        {
            dbComponent[i].Days = dbComponent[i].Days.OrderBy(x => x.Date).ToList();
        }
        this.components = dbComponent;
        StateHasChanged();
    }

    void UpdateComponents(List<Component> components)
    {
        components = components.OrderBy(x => x.ComponentNumber).ToList();
        for (int i = 0; i < components.Count; i++)
        {
            components[i].Days = components[i].Days.OrderBy(x => x.Date).ToList();
        }
        this.components = components;
        StateHasChanged();
    }

    private async Task OverwriteDay(Day day, DayType dayType = DayType.Training)
    {
        var result = await Http.PostAsJsonAsync($"api/Days/Overwrite", new OverwriteDay { ToAdd = new Day { Date = day.Date, ComponentId = day.ComponentId, Type = dayType }, ToDelete = day });
        if (result.IsSuccessStatusCode)
        {
            if (dayType == DayType.Training)
            {
                day = await result.Content.ReadFromJsonAsync<Day>();
                NavManager.NavigateTo($"/Days/Edit/{day.Id}");
            }
            else
            {
                await UpdateComponents();
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.ReasonPhrase, Duration = 5000 });
        }
    }

    void AddDayClickedMenu(MouseEventArgs args, List<Component> components, Component component)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Training Day", Value = new MenuItemValue { Component = component, Components = components, Choice = 1 } },
                new ContextMenuItem(){ Text = "Rest Day", Value = new MenuItemValue { Component = component, Components = components, Choice = 2 } }
                                         }, AddDayMenuClicked);
    }

    void AddDayMenuClicked(MenuItemEventArgs args)
    {
        ContextMenuService.Close();
        var value = args.Value as MenuItemValue;
        if (value.Choice == 1)
        {
            AddDay(value.Component, value.Components).ConfigureAwait(false);
        }
        else if (value.Choice == 2)
        {
            AddDay(value.Component, value.Components, DayType.Rest).ConfigureAwait(false);
        }
    }

    void OverwriteDayClickedMenu(MouseEventArgs args, Day day)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Training Day", Value = new MenuItemValue { Day = day, Choice = 1 } },
                new ContextMenuItem(){ Text = "Rest Day", Value = new MenuItemValue { Day = day, Choice = 2 } }
                                             }, OverwriteDayMenuClicked);
    }

    void OverwriteDayMenuClicked(MenuItemEventArgs args)
    {
        ContextMenuService.Close();
        var value = args.Value as MenuItemValue;
        if (value.Choice == 1)
        {
            OverwriteDay(value.Day).ConfigureAwait(false);
        }
        else if (value.Choice == 2)
        {
            OverwriteDay(value.Day, DayType.Rest).ConfigureAwait(false);
        }
    }

    void DayClickedMenu(MouseEventArgs args, Day day)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Edit Day", Value = new MenuItemValue { Day = day, Choice = 1 } },
                new ContextMenuItem(){ Text = "Overwrite Day", Value = new MenuItemValue { Day = day, Choice = 2 } },
                new ContextMenuItem(){ Text = "Delete Day", Value = new MenuItemValue { Day = day, Choice = 3 } }
                                     }, DayMenuClicked);
    }

    void DayMenuClicked(MenuItemEventArgs args)
    {
        ContextMenuService.Close();
        var value = args.Value as MenuItemValue;
        if (value.Choice == 1)
        {
            NavManager.NavigateTo($"/Days/Edit/{value.Day.Id}");
        }
        else if (value.Choice == 2)
        {
            OverwriteDayClickedMenu(args, value.Day);
        }
        else if (value.Choice == 3)
        {
            DeleteDay(value.Day).ConfigureAwait(false);
        }
    }

    void NewDayClickedMenu(MouseEventArgs args, List<Component> components, Component component)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Add Day", Value = new MenuItemValue { Component = component, Components = components, Choice = 1 } },
                new ContextMenuItem(){ Text = "Add Component", Value = new MenuItemValue { Component = component, Components = components, Choice = 2 } }
                                             }, NewDayMenuClicked);
    }

    void NewDayMenuClicked(MenuItemEventArgs args)
    {
        ContextMenuService.Close();
        var value = args.Value as MenuItemValue;
        if (value.Choice == 1)
        {
            AddDayClickedMenu(args, value.Components, value.Component);
        }
        else if (value.Choice == 2)
        {
            SelectComponentDefinition(value.Component, value.Components).ConfigureAwait(false);
        }
    }

    async Task SelectComponentDefinition(Component component, List<Component> components)
    {
        var componentDefinitions = await Http.GetFromJsonAsync<List<ComponentDefinition>>("api/ComponentDefinitions");
        if (componentDefinitions == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Could not get component definitions", Detail = "", Duration = 5000 });
        }
        else if (componentDefinitions.Count == 0)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "You have not created any component definitions yet", Detail = "", Duration = 5000 });
        }
        else
        {
            var result = await DialogService.OpenAsync<ProgramPro.Client.Pages.ComponentDefinitions.SelectComponentDefinition>($"Select Component Definition",
                new Dictionary<string, object>() { { "ComponentDefinitions", componentDefinitions } },
                new DialogOptions() { Width = "400px", Height = "512px", Resizable = true, Draggable = true });
            if (result as ComponentDefinition != default)
            {
                List<Day> daysFromComponentDefinition = new List<Day>();
                var ComponentDefinition = result as ComponentDefinition;
                var dayDefinitions = ComponentDefinition.DayDefinitions.ToList();
                var date = GetNewDayDate(component, components);
                for (int i = 0; i < dayDefinitions.Count; i++)
                {
                    var newDay = new Day()
                        {
                            Date = date.AddDays(dayDefinitions[i].Number - 1),
                            WorkoutExercises = new List<WorkoutExercise>(),
                            ComponentId = component.Id
                        };
                    var workoutExerciseDefinitions = dayDefinitions[i].WorkoutExerciseDefinitions.ToList();
                    for (int j = 0; j < workoutExerciseDefinitions.Count; j++)
                    {
                        var workoutExercise = new WorkoutExercise()
                            {
                                ExerciseId = workoutExerciseDefinitions[j].ExerciseId,
                                Sets = new List<Set>()
                            };
                        var setDefinitions = workoutExerciseDefinitions[j].SetDefinitions.ToList();
                        for (int k = 0; k < setDefinitions.Count; k++)
                        {
                            workoutExercise.Sets.Add(new Set
                                {
                                    PercentageOfOneRepMax = setDefinitions[k].PercentageOfOneRepMax,
                                    Reps = setDefinitions[k].Reps,
                                    RIR = setDefinitions[k].RIR,
                                    RPE = setDefinitions[k].RPE,
                                    Type = setDefinitions[k].Type,
                                    UsingPercentageOfOneRepMax = setDefinitions[k].UsingPercentageOfOneRepMax,
                                    UsingRIR = setDefinitions[k].UsingRIR,
                                    UsingRPE = setDefinitions[k].UsingRPE,
                                    Weight = setDefinitions[k].Weight,
                                });
                        }
                        newDay.WorkoutExercises.Add(workoutExercise);
                    }
                    daysFromComponentDefinition.Add(newDay);
                }
                var response = await Http.PostAsJsonAsync("api/Days/PostDays", daysFromComponentDefinition);
                if (response.IsSuccessStatusCode)
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Component Definition added to the program", Detail = "", Duration = 5000 });
                    await UpdateComponents();
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = response.ReasonPhrase, Duration = 5000 });
                }
            }
        }
    }

    private class MenuItemValue
    {
        public Day Day { get; set; }
        public Component Component { get; set; }
        public List<Component> Components { get; set; }
        public int Choice { get; set; }
    }
}

<style>
    .calendar {
        width: 100%;
        display: flex;
        flex-direction: column;
        background-color: #38474e; /* Brug websites baggrundsfarve */
        color: #fff;
        margin-top: 20px;
        box-shadow: var(--rz-card-shadow);
        border-radius: 5px;
    }

    .component {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-bottom: 10px;
    }

    .days {
        display: flex;
        flex-grow: 1;
        padding-left: 5px;
        padding-right: 5px;
    }

    .day {
        width: calc(100% / 5);
        padding: 5px;
        margin-left: 5px;
        margin-right: 5px;
        cursor: pointer;
        height: auto;
        min-height: 75px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        border: var(--rz-input-border);
        border-radius: var(--rz-input-border-radius);
        box-shadow: var(--rz-input-shadow);
        background-color: var(--rz-input-background-color);
    }

        .day:hover {
            transition: background-color .2s ease-in;
            background-color: darkseagreen;
        }

    .day-number {
        font-weight: bold;
        margin-bottom: 5px;
    }
</style>