@inject NavigationManager NavManager 
@inject HttpClient Http
@inject NotificationService NotificationService

<RadzenRow>
    <RadzenColumn>
        <RadzenText Text="Cycle Number" />
        <RadzenNumeric @bind-Value="@DaysInACycle" />
    </RadzenColumn>
    <RadzenColumn>
        <RadzenText Text="Week Number" />
        <RadzenNumeric @bind-Value="@CycleAmount" />
    </RadzenColumn>
    <RadzenColumn>
        <RadzenText Text="Start Date" />
        <RadzenDatePicker @bind-Value="@StartDate" />
    </RadzenColumn>
</RadzenRow>

<div class="calendar">
    @for (int cycle = 1; cycle <= CycleAmount; cycle++)
    {
        <div class="week">
            <div class="week-number">
                Cycle @cycle
            </div>
            <div class="days">
                @for (int day = 1; day <= DaysInACycle; day++)
                {
                    int dayNumber = (cycle - 1) * DaysInACycle + day;
                    var realDay = StartDate.AddDays(dayNumber - 1);
                    <div class="day" @onclick="() => AddDay(realDay)">
                        <div class="day-number">
                            @realDay.Day : @realDay.DayOfWeek
                        </div>
                        @foreach (var item in Days)
                        {
                            if (item.Date.ToShortDateString() == realDay.ToShortDateString())
                            {
                                @item.Id
                            }
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int ProgramId { get; set; }
    [Parameter]
    public List<Day> Days { get; set; }
    public int DaysInACycle = 7;
    public int CycleAmount = 1;
    public DateTime StartDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        try
        {

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task AddDay(DateTime date)
    {
        bool createNew = true;
        foreach(var item in Days)
        {
            if(item.Date.ToShortDateString() == date.ToShortDateString())
            {
                createNew = false;
                NavManager.NavigateTo($"/Days/Edit/{item.Id}");
                break;
            }
        }
        if(createNew == true)
        {
            var result = await Http.PostAsJsonAsync("api/Days", new Day { Date = date, TrainingprogramId = ProgramId });
            if (result.IsSuccessStatusCode)
            {
                var day = await result.Content.ReadFromJsonAsync<Day>();
                NavManager.NavigateTo($"/Days/Edit/{day.Id}");
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.ReasonPhrase, Duration = 20000 });
            }
        }
    }
}

<style>
    .calendar {
        width: 100%;
        display: flex;
        flex-direction: column;
    }

    .week {
        display: flex;
        flex-direction: row; /* Display days horizontally within a week */
        align-items: center;
        margin-bottom: 10px; /* Separate weeks */
    }

    .week-number {
        font-weight: bold;
        width: 10%; /* Fixed width for week numbers */
        text-align: center;
    }

    .days {
        display: flex;
        flex-grow: 1; /* Days fill the remaining space */
        justify-content: space-between; /* Fill the entire width */
    }

    .day {
        width: calc(100% / 7); /* Equal width for each day */
        border: 1px solid #ccc;
        padding: 5px;
        cursor: pointer;
        height: 200px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
    }

    .day-number {
        font-weight: bold;
        margin-bottom: 5px;
    }
</style>
