@page "/Days/Edit/{Id:int}"

@inject NavigationManager NavManager
@inject HttpClient Http
@inject NotificationService NotificationService
@inject DialogService DialogService


<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Programs" />
        <RadzenBreadCrumbItem Path="@programCrumb" Text="Edit Program" />
        <RadzenBreadCrumbItem Style="color:darkseagreen" Text="Edit Day" />
    </RadzenBreadCrumb>
</div>

@if (day != null)
{
    <RadzenRow>
        <RadzenText Style="color:darkseagreen" TextStyle="TextStyle.DisplayH5">@day.Date.ToShortDateString()</RadzenText>
</RadzenRow>

     <RadzenRow>
        <RadzenText TextStyle="TextStyle.DisplayH6">Workout Exercises</RadzenText>
     </RadzenRow>
    
   
    <RadzenRow Style="margin-bottom:20px;">
        <RadzenButton Click="() => AddWorkoutExercise()">Add Workout Exercise</RadzenButton>
        <RadzenButton Click=@Delete>Delete Day</RadzenButton>
    </RadzenRow>

        @if (day.WorkoutExercises != null)
        {
            <RadzenDataGrid Data="@workoutExercises" TItem="WorkoutExercise">
                <Columns>
                <RadzenDataGridColumn TItem="WorkoutExercise" Property="Exercise.Name" Title="Exercise" />
                <RadzenDataGridColumn TItem="WorkoutExercise" Title="Sets">
                    <Template Context="workoutExercise">
                        @workoutExercise.Sets.Count
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WorkoutExercise">
                        <Template Context="workoutExercise">
                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditWorkoutExercise(workoutExercise))" />
                        </Template>
                </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        }
}
else
{
    <RadzenRow Style="padding:100px">
        <div style="margin:auto; text-align:center;">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </RadzenRow>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private IEnumerable<WorkoutExercise> workoutExercises;
    public Day day = null;
    string programCrumb = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            day = await Http.GetFromJsonAsync<Day>($"api/Days/{Id}");
            workoutExercises = day.WorkoutExercises;
            programCrumb = $"/Programs/Edit/{day.Split.TrainingProgramId}";
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void EditWorkoutExercise(WorkoutExercise workoutExercise)
    {
        NavManager.NavigateTo($"/WorkoutExercises/Edit/{workoutExercise.Id}");
    }

    private async Task AddWorkoutExercise()
    {
        var workoutExercise = await DialogService.OpenAsync<ProgramPro.Client.Pages.WorkoutExercises.Create>($"Create Workout Exercise",
            new Dictionary<string, object>() { { "DayId", Id} },
            new DialogOptions() { Resizable = true, Draggable = true });
        if ((WorkoutExercise)workoutExercise != default)
        {
            NavManager.NavigateTo($"/WorkoutExercises/Edit/{workoutExercise.Id}");
        }

    }

    private async Task Delete()
    {
        var result = await DialogService.OpenAsync<Confirmation>($"Delete",
            new Dictionary<string, object>() { { "Message", "Are you sure you want to delete this day?" } },
            new DialogOptions() { Resizable = true, Draggable = true });
        if(result != null)
        {
            if ((bool)result == true)
            {
                var response = await Http.DeleteAsync($"api/Days/{Id}");
                if (response.IsSuccessStatusCode)
                {
                    NavManager.NavigateTo($"/Programs/Edit/{day.Split.TrainingProgramId}");
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Day Deleted", Detail = "", Duration = 5000 });
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Failed To Delete Day", Detail = "", Duration = 5000 });
                }
            }
        }
    }
}
