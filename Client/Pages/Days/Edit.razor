@page "/Days/Edit/{Id:int}"

@inject NavigationManager NavManager
@inject HttpClient Http
@inject NotificationService NotificationService


<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Programs" />
        <RadzenBreadCrumbItem Path="@programCrumb" Text="Edit Program" />
        <RadzenBreadCrumbItem Style="color:darkseagreen" Text="Edit Day" />
    </RadzenBreadCrumb>
</div>

<h3>Edit Day</h3>

@if (day != null)
{
    <p>Date: @day.Date.ToShortDateString()</p>
    <p>Training Program Id: @day.TrainingprogramId</p>

    <h4>Workout Exercises</h4>
    <RadzenButton Click="() => AddWorkoutExercise()">Add Workout Exercise</RadzenButton>
    <ul>
        @if (day.WorkoutExercises != null)
        {
            @foreach (var exercise in day.WorkoutExercises)
            {
                <li>
                    <p>Exercise Id: @exercise.ExerciseId</p>
                    <!-- Add more exercise details here -->
                </li>
            }
        }

    </ul>
}
else
{
    <p>Day not found.</p>
}

@code {
    [Parameter]
    public int Id { get; set; }
    public Day day = null;
    string programCrumb = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            day = await Http.GetFromJsonAsync<Day>($"api/Days/{Id}");
            programCrumb = $"/Programs/Edit/{day.TrainingprogramId}";
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task AddWorkoutExercise()
    {
        NavManager.NavigateTo($"/WorkoutExercises/Create/{Id}");
    }
}
