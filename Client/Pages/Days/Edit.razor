@page "/Days/Edit/{Id:int}"

@inject NavigationManager NavManager
@inject HttpClient Http
@inject NotificationService NotificationService
@inject DialogService DialogService


<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Programs" />
        <RadzenBreadCrumbItem Path="@programCrumb" Text="Edit Program" />
        <RadzenBreadCrumbItem Style="color:darkseagreen" Text="Edit Day" />
    </RadzenBreadCrumb>
</div>

<h3>Edit Day</h3>

@if (day != null)
{
    <p>Date: @day.Date.ToShortDateString()</p>
    <p>Training Program Id: @day.TrainingprogramId</p>

    <h4>Workout Exercises</h4>
    <RadzenButton Click="() => AddWorkoutExercise()">Add Workout Exercise</RadzenButton>
        @if (day.WorkoutExercises != null)
        {
            <RadzenDataGrid Data="@workoutExercises" TItem="WorkoutExercise">
                <Columns>
                <RadzenDataGridColumn TItem="WorkoutExercise" Property="Exercise.Name" Title="Exercise" />
                <RadzenDataGridColumn TItem="WorkoutExercise">
                        <Template Context="workoutExercise">
                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditWorkoutExercise(workoutExercise))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
}
else
{
    <p>Day not found.</p>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private IEnumerable<WorkoutExercise> workoutExercises;
    public Day day = null;
    string programCrumb = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            day = await Http.GetFromJsonAsync<Day>($"api/Days/{Id}");
            workoutExercises = day.WorkoutExercises;
            programCrumb = $"/Programs/Edit/{day.TrainingprogramId}";
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void EditWorkoutExercise(WorkoutExercise workoutExercise)
    {
        NavManager.NavigateTo($"/WorkoutExercises/Edit/{Id}/{workoutExercise.Id}");
    }

    private async Task AddWorkoutExercise()
    {
        var exercise = await DialogService.OpenAsync<PickExercise>($"Create Workout Exercise",
            new Dictionary<string, object>() { },
            new DialogOptions() { Resizable = true, Draggable = true });
        if ((Exercise)exercise != default)
        {
            NavManager.NavigateTo($"/WorkoutExercises/Edit/{Id}/{exercise.Id}");
        }
        
    }
}
