@page "/PartDefinitions"
@inject NavigationManager Nav
@inject NotificationService NotificationService
@attribute [Authorize]
@inject HttpClient Http


<RadzenRow>
    <RadzenColumn>
        <RadzenCard Variant="Variant.Text" Style="margin:10px; border-radius: 0px;">
            <RadzenButton Click=@(args => CreatePartDefinition()) Text="Create New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" />
        </RadzenCard>
       
    </RadzenColumn>
</RadzenRow>


@if (loading)
{
    
}
else
{
    
}
<RadzenRow>
    <RadzenColumn>
        <RadzenDataList AllowVirtualization=@allowVirtualization Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                        WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                        Data="@partDefinitions" TItem="PartDefinition" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
            <Template Context="partDefinition">
                <RadzenCard Style="width: 100%; padding: 0;">
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="12" SizeLG="3" Class="rz-p-4 product-title">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-secondary">@(partDefinition.Name)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeLG="7" Class="rz-p-4">
                                <RadzenRow Gap="0">
                                    <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">In Stock</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@(partDefinition.Description)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">In Stock</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@(partDefinition.Description)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="6" SizeLG="5">
                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">In Stock</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@(partDefinition.Description)</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeLG="2" Class="rz-p-4">
                                <RadzenButton Text="Order now" Style="width: 100%" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
        </RadzenColumn>
    </RadzenRow>

    <style>
        .product-title {
            min-height: 72px;
            background-color: var(--rz-secondary-lighter);
        }

        .price-badge {
            font-size: 16px;
            font-weight: bold;
            line-height: 20px;
            padding: 8px;
        }
    </style>

    @code {
    bool allowVirtualization = false;
    bool loading = false;
    private List<PartDefinition> partDefinitions = new List<PartDefinition>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            partDefinitions = await Http.GetFromJsonAsync<List<PartDefinition>>("api/PartDefinitions");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task CreatePartDefinition()
    {
        var result = await Http.PostAsJsonAsync("api/PartDefinitions", new PartDefinition { Name = "New PartDefinition" });
        if (result.IsSuccessStatusCode)
        {
            var partDefinition = await result.Content.ReadFromJsonAsync<PartDefinition>();
            Nav.NavigateTo($"/PartDefinitions/{partDefinition.Id}");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.ReasonPhrase, Duration = 20000 });
        }
    }
}