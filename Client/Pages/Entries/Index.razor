@page "/Entries"
@inject NavigationManager NavManager
@inject HttpClient Http
@inject NotificationService NotificationService
@inject DialogService DialogService

@if (initialized == false)
{
    <RadzenRow Style="padding:100px">
        <div style="margin:auto; text-align:center;">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </RadzenRow>
}
else
{
    <RadzenDataList WrapItems="true" AllowPaging="false" Data="@pageItems" TItem="WorkoutExerciseVisualizer">
        <Template Context="workoutExerciseVisualizer">
            <RadzenCard Style="flex: 1;">
                <RadzenStack AlignItems="AlignItems.Center" Gap="1rem">
                    <RadzenStack Gap="0">
                        <RadzenText Text="@workoutExerciseVisualizer?.TrainingProgram.Name" />
                        <RadzenText Text="@workoutExerciseVisualizer?.Date.ToShortDateString()" />
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.P" TextAlign="TextAlign.Center">@workoutExerciseVisualizer?.Exercise.Name</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Center">@workoutExerciseVisualizer.MissingEntryAmount missing entries</RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </Template>
        </RadzenDataList>

    <RadzenPager Density="Density.Default" HorizontalAlign="HorizontalAlign.Center" Count="workoutExerciseVisualizers.Count" PageSize="pageSize" PageNumbersCount="6" PageChanged="@PageChanged" />
}

@code {
    List<Entry> entries = null;
    List<WorkoutExerciseVisualizer> workoutExerciseVisualizers = new List<WorkoutExerciseVisualizer>();
    List<WorkoutExerciseVisualizer> pageItems = new List<WorkoutExerciseVisualizer>();
    bool initialized = false;
    int pageSize = 5;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var trainingPrograms = await Http.GetFromJsonAsync<List<TrainingProgram>>("api/Trainingprograms");
            foreach (var program in trainingPrograms)
            {
                foreach (var component in program.Components)
                {
                    foreach (var day in component.Days)
                    {
                        foreach (var workoutExercise in day.WorkoutExercises)
                        {
                            foreach (var set in workoutExercise.Sets)
                            {
                                if (set.Entry == null)
                                {
                                    bool found = false;
                                    for(int i = 0; i < workoutExerciseVisualizers.Count && found == false; i++)
                                    {
                                        if (workoutExerciseVisualizers[i].WorkoutExerciseId == workoutExercise.Id)
                                        {
                                            found = true;
                                            workoutExerciseVisualizers[i].MissingEntryAmount++;
                                        }
                                    }
                                    if(!found)
                                    {
                                        var newWorkoutExerciseVisualizer = new WorkoutExerciseVisualizer
                                            {
                                                WorkoutExerciseId = workoutExercise.Id,
                                                Date = day.Date,
                                                Exercise = workoutExercise.Exercise,
                                                MissingEntryAmount = 1,
                                                TrainingProgram = program
                                            };
                                        workoutExerciseVisualizers.Add(newWorkoutExerciseVisualizer);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            pageItems = GetPageItems(0, pageSize);
            initialized = true;
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void PageChanged(PagerEventArgs args)
    {
        pageItems = GetPageItems(args.Skip, args.Top);
    }

    List<WorkoutExerciseVisualizer> GetPageItems(int skip, int take)
    {
        return workoutExerciseVisualizers.Skip(skip).Take(take).ToList();
    }
}
